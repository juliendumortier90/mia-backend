service: backend-mia
frameworkVersion: "2"

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    forceExclude:
      - aws-sdk
  authorizer:
    clientApiKey:
      name: authorizerApiKey
      type: request
      identitySource: method.request.header.X-API-KEY, context.path
      resultTtlInSeconds: 60
  cors:

allowedOrigins:
  origin: https://madeinapremont.fr,http://madeinapremont.fr,https://localhost:4200,http://localhost:4200
  jsOrigin: https://madeinapremont\.fr,http://madeinapremont\.fr,https://localhost:4200,http://localhost:4200
  headers:
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - x-client-app-id
  allowCredentials: false

package:
  excludeDevDependencies: true
  individually: true
  exclude:
    - "./**"
    - "node_modules/**/aws-sdk/**"

plugins:
  - "serverless-webpack"
  - serverless-iam-roles-per-function
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  memorySize: 512
  timeout: 25
  reservedConcurrency: 50
  logRetentionInDays: 14
  iamRoleStatements:
    - Effect: "Allow"
      Action: ["lambda:RemovePermission"]
      Resource: ["arn:aws:lambda:*"]

functions:
  authorizerApiKey:
    handler: src/functions/authorizer/index.validation
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:Scan"]
        Resource: [!GetAtt UserTokenDynamoTable.Arn]
  login:
    handler: src/functions/admin/login/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:DeleteItem", "dynamodb:PutItem"]
        Resource: [!GetAtt UserTokenDynamoTable.Arn]
      - Effect: Allow
        Action: ["dynamodb:GetItem"]
        Resource: [!GetAtt UserDynamoTable.Arn]
    events:
      - http:
          path: /admin/login
          method: post
          cors: true
  add-user:
    handler: src/functions/admin/add-user/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:DeleteItem", "dynamodb:PutItem"]
        Resource: [!GetAtt UserTokenDynamoTable.Arn]
      - Effect: Allow
        Action: ["dynamodb:Scan", "dynamodb:PutItem"]
        Resource: [!GetAtt UserDynamoTable.Arn]
    events:
      - http:
          path: /admin/add-user
          method: post
          cors: true
  list-feeds:
    handler: src/functions/instagram/list-feeds/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:Scan"]
        Resource: [!GetAtt InstagramLastFeedDynamoTable.Arn]
    events:
      - http:
          path: /instagram/list-feeds
          method: get
          cors: true
  list-shop-items:
    handler: src/functions/shop/list-items/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:Scan"]
        Resource: [!GetAtt ShopItemDynamoTable.Arn]
    events:
      - http:
          path: /shop/list-items
          method: get
          cors: true
  add-shop-item:
    handler: src/functions/shop/add-item/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:PutItem"]
        Resource: [!GetAtt ShopItemDynamoTable.Arn]
    events:
      - http:
          path: /shop/add-item
          method: post
          authorizer: ${self:custom.authorizer.clientApiKey}
          cors: true
  delete-shop-item:
    handler: src/functions/shop/delete-item/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:DeleteItem", "dynamodb:GetItem", "dynamodb:PutItem"]
        Resource: [!GetAtt ShopItemDynamoTable.Arn]
    events:
      - http:
          path: /shop/delete-item
          method: post
          authorizer: ${self:custom.authorizer.clientApiKey}
          cors: true
  check-stock:
    handler: src/functions/shop/check-stock/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:Scan"]
        Resource: [!GetAtt ShopItemDynamoTable.Arn]
    events:
      - http:
          path: /shop/check-stock
          method: post
          cors: true
  oncomplete-transaction:
    handler: src/functions/shop/oncomplete-transaction/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:GetItem", "dynamodb:ScanItem", "dynamodb:UpdateItem"]
        Resource: [!GetAtt ShopItemDynamoTable.Arn]
      - Effect: Allow
        Action: ["dynamodb:GetItem", "dynamodb:ScanItem", "dynamodb:PutItem"]
        Resource: [!GetAtt OrderItemDynamoTable.Arn]
    events:
      - http:
          path: /shop/oncomplete-transaction
          method: post
          cors: true
  hello-callback:
    handler: src/functions/member/hello-callback/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:PutItem"]
        Resource: [!GetAtt MemberItemDynamoTable.Arn]
    events:
      - http:
          path: /member/hello-callback
          method: post
          cors: true
  insta-oauth:
    handler: src/functions/instagram/authentication/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["ssm:GetParameter", "ssm:PutParameter"]
        Resource:
          - "arn:aws:ssm:*:636947615075:parameter/*"
    events:
      - http:
          path: /instagram/oauth
          method: get
  insta-refreshtoken-job:
    transfer:
    handler: src/functions/instagram/authentication/job.cronHandler
    events: [{ schedule: cron(0 8 1 * ? *) }] # cron(0 8 1 * ? *) every 1st day of month at 8h
    iamRoleStatements:
      - Effect: Allow
        Action: ["ssm:GetParameter", "ssm:PutParameter"]
        Resource:
          - "arn:aws:ssm:*:636947615075:parameter/*"
  insta-updatefeeds-job:
    transfer:
    handler: src/functions/instagram/update-feeds/job.cronHandler
    events: [{ schedule: cron(0/30 * ? * * *) }] # every 30min
    iamRoleStatements:
      - Effect: Allow
        Action: ["ssm:GetParameter"]
        Resource:
          - "arn:aws:ssm:*:636947615075:parameter/*"
      - Effect: Allow
        Action: ["dynamodb:PutItem", "dynamodb:DeleteItem", "dynamodb:Scan"]
        Resource: [!GetAtt InstagramLastFeedDynamoTable.Arn]
resources:
  Resources:
    InstagramLastFeedDynamoTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "mia-backend-instagram-last-feed"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    ShopItemDynamoTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "mia-backend-shop-item"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    OrderItemDynamoTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "mia-backend-order-item"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    MemberItemDynamoTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "mia-backend-member-item"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    UserDynamoTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "mia-backend-user"
        AttributeDefinitions:
          - AttributeName: login
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: login
            KeyType: HASH
    UserTokenDynamoTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "mia-backend-admin-token"
        AttributeDefinitions:
          - AttributeName: login
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiredAt
          Enabled: true
        KeySchema:
          - AttributeName: login
            KeyType: HASH
    # CORS
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
        ResponseTemplates:
          application/json: '{"errorCode"}'
    AuthFailureGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
        ResponseTemplates:
          application/json: '{"errorCode"}'
    GatewayResponseResourceNotFound:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: RESOURCE_NOT_FOUND
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "404"
        ResponseTemplates:
          application/json: '{"errorCode"}'
    AccessDeniedGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: ACCESS_DENIED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "403"
        ResponseTemplates:
          application/json: '{"errorCode"}'
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ResponseTemplates:
          application/json: '{"errorCode"}'
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ResponseTemplates:
          application/json: '{"errorCode"}'
