service: backend-mia
frameworkVersion: "2"

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    forceExclude:
      - aws-sdk

package:
  excludeDevDependencies: true
  individually: true
  exclude:
    - "./**"
    - "node_modules/**/aws-sdk/**"

plugins:
  - "serverless-webpack"
  - serverless-iam-roles-per-function
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  memorySize: 512
  timeout: 25
  reservedConcurrency: 50
  logRetentionInDays: 14
  iamRoleStatements:
    - Effect: "Allow"
      Action: ["lambda:RemovePermission"]
      Resource: ["arn:aws:lambda:*"]

functions:
  list-feeds:
    handler: src/functions/instagram/list-feeds/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:Scan"]
        Resource: [!GetAtt InstagramLastFeedDynamoTable.Arn]
    events:
      - http:
          path: /instagram/list-feeds
          method: get
          cors: true
  list-shop-items:
    handler: src/functions/shop/list-items/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:Scan"]
        Resource: [!GetAtt ShopItemDynamoTable.Arn]
    events:
      - http:
          path: /shop/list-items
          method: get
          cors: true
  add-shop-item:
    handler: src/functions/shop/add-item/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:PutItem"]
        Resource: [!GetAtt ShopItemDynamoTable.Arn]
    events:
      - http:
          path: /shop/add-item
          method: post
          cors: true
  delete-shop-item:
    handler: src/functions/shop/delete-item/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["dynamodb:DeleteItem", "dynamodb:GetItem", "dynamodb:PutItem"]
        Resource: [!GetAtt ShopItemDynamoTable.Arn]
    events:
      - http:
          path: /shop/delete-item
          method: post
          cors: true
  insta-oauth:
    handler: src/functions/instagram/authentication/index.handler
    iamRoleStatements:
      - Effect: Allow
        Action: ["ssm:GetParameter", "ssm:PutParameter"]
        Resource:
          - "arn:aws:ssm:*:636947615075:parameter/*"
    events:
      - http:
          path: /instagram/oauth
          method: get
  insta-refreshtoken-job:
    transfer:
    handler: src/functions/instagram/authentication/job.cronHandler
    events: [{ schedule: cron(0 8 1 * ? *) }] # cron(0 8 1 * ? *) every 1st day of month at 8h
    iamRoleStatements:
      - Effect: Allow
        Action: ["ssm:GetParameter", "ssm:PutParameter"]
        Resource:
          - "arn:aws:ssm:*:636947615075:parameter/*"
  insta-updatefeeds-job:
    transfer:
    handler: src/functions/instagram/update-feeds/job.cronHandler
    events: [{ schedule: cron(0/30 * ? * * *) }] # every 30min
    iamRoleStatements:
      - Effect: Allow
        Action: ["ssm:GetParameter"]
        Resource:
          - "arn:aws:ssm:*:636947615075:parameter/*"
      - Effect: Allow
        Action: ["dynamodb:PutItem", "dynamodb:DeleteItem", "dynamodb:Scan"]
        Resource: [!GetAtt InstagramLastFeedDynamoTable.Arn]
resources:
  Resources:
    InstagramLastFeedDynamoTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "mia-backend-instagram-last-feed"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    ShopItemDynamoTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "mia-backend-shop-item"
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
